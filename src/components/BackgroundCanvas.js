/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 3D —Ñ–æ–Ω–∞ —Å –º–æ–¥–µ–ª—å—é –æ–¥–µ–∂–¥—ã
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é 3D —Å—Ü–µ–Ω—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—Ä–∞—â–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –Ω–∞ –º–æ–¥–µ–ª—å
 */
import React, { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { loadTShirtModel } from '../utils/modelLoader';
import { useLanguage } from '../locales/LanguageContext';

export default function BackgroundCanvas({ design, isVisible, autoRotate, onAutoRotateChange }) {
  const { t } = useLanguage();
  const containerRef = useRef(null);
  const sceneRef = useRef(null);
  const cameraRef = useRef(null);
  const rendererRef = useRef(null);
  const controlsRef = useRef(null);
  const tshirtRef = useRef(null);
  const currentTextureRef = useRef(null);
  const [isLoading, setIsLoading] = useState(true);
  const userInteractedRef = useRef(false);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—Å–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('üé¨ BackgroundCanvas –ø–æ–ª—É—á–∏–ª –ø—Ä–æ–ø—Å—ã:', { 
      autoRotate, 
      hasOnAutoRotateChange: !!onAutoRotateChange,
      hasDesign: !!design
    });
  }, []);

  useEffect(() => {
    if (!containerRef.current) return;

    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–≥–æ 3D canvas');

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x0a0a0a);
    scene.fog = new THREE.Fog(0x0a0a0a, 50, 200);
    sceneRef.current = scene;

    // –ö–∞–º–µ—Ä–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const camera = new THREE.PerspectiveCamera(
      50,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.set(0, 0, 100);
    camera.lookAt(0, 0, 0);
    cameraRef.current = camera;

    // –†–µ–Ω–¥–µ—Ä–µ—Ä —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const renderer = new THREE.WebGLRenderer({ 
      antialias: true,
      alpha: false,
      powerPreference: 'high-performance'
    });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 1.0;
    renderer.outputEncoding = THREE.sRGBEncoding;
    containerRef.current.appendChild(renderer.domElement);
    rendererRef.current = renderer;

    // –û—Å–≤–µ—â–µ–Ω–∏–µ - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—É–¥–∏–π–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    // –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Ö–Ω–∏–π —Å–≤–µ—Ç
    const keyLight = new THREE.DirectionalLight(0xffffff, 1.2);
    keyLight.position.set(30, 50, 30);
    keyLight.castShadow = true;
    keyLight.shadow.mapSize.width = 2048;
    keyLight.shadow.mapSize.height = 2048;
    keyLight.shadow.camera.near = 0.5;
    keyLight.shadow.camera.far = 200;
    keyLight.shadow.camera.left = -50;
    keyLight.shadow.camera.right = 50;
    keyLight.shadow.camera.top = 50;
    keyLight.shadow.camera.bottom = -50;
    keyLight.shadow.bias = -0.001;
    scene.add(keyLight);

    // –ó–∞–ø–æ–ª–Ω—è—é—â–∏–π —Å–≤–µ—Ç —Å–ª–µ–≤–∞
    const fillLight = new THREE.DirectionalLight(0xb8a5ff, 0.5);
    fillLight.position.set(-40, 20, 20);
    scene.add(fillLight);

    // –ö–æ–Ω—Ç—Ä–æ–≤–æ–π —Å–≤–µ—Ç —Å–ø—Ä–∞–≤–∞
    const rimLight = new THREE.DirectionalLight(0xffa5d8, 0.6);
    rimLight.position.set(40, 20, -20);
    scene.add(rimLight);

    // –ú—è–≥–∫–∏–π –æ–∫—Ä—É–∂–∞—é—â–∏–π —Å–≤–µ—Ç
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.3);
    scene.add(ambientLight);

    // –ù–∏–∂–Ω—è—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è –æ–±—ä–µ–º–∞
    const bottomLight = new THREE.PointLight(0x8b7fff, 0.4, 100);
    bottomLight.position.set(0, -30, 0);
    scene.add(bottomLight);

    // –ê–∫—Ü–µ–Ω—Ç–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∑–∞–¥–∏
    const backLight = new THREE.PointLight(0xff8bd8, 0.3, 80);
    backLight.position.set(0, 10, -50);
    scene.add(backLight);

    // –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
    const platformGeometry = new THREE.CylinderGeometry(30, 30, 2, 64);
    const platformMaterial = new THREE.MeshStandardMaterial({
      color: 0x1a1a2e,
      roughness: 0.6,
      metalness: 0.4,
      emissive: 0x9333ea,
      emissiveIntensity: 0.15
    });
    const platform = new THREE.Mesh(platformGeometry, platformMaterial);
    platform.position.y = -30;
    platform.receiveShadow = true;
    platform.castShadow = false;
    scene.add(platform);

    // –°–≤–µ—Ç–æ–≤–æ–µ –∫–æ–ª—å—Ü–æ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    const ringGeometry = new THREE.TorusGeometry(32, 0.3, 16, 100);
    const ringMaterial = new THREE.MeshStandardMaterial({
      color: 0x9333ea,
      emissive: 0x9333ea,
      emissiveIntensity: 1.0,
      transparent: true,
      opacity: 0.8,
      roughness: 0.3,
      metalness: 0.7
    });
    const ring = new THREE.Mesh(ringGeometry, ringMaterial);
    ring.position.y = -29;
    ring.rotation.x = Math.PI / 2;
    scene.add(ring);

    // –ß–∞—Å—Ç–∏—Ü—ã –¥–ª—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
    const particlesGeometry = new THREE.BufferGeometry();
    const particlesCount = 1500;
    const positions = new Float32Array(particlesCount * 3);
    const colors = new Float32Array(particlesCount * 3);

    for (let i = 0; i < particlesCount; i++) {
      positions[i * 3] = (Math.random() - 0.5) * 200;
      positions[i * 3 + 1] = (Math.random() - 0.5) * 200;
      positions[i * 3 + 2] = (Math.random() - 0.5) * 200;

      // –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –º–µ–∂–¥—É —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º –∏ —Ä–æ–∑–æ–≤—ã–º
      const mixValue = Math.random();
      colors[i * 3] = 0.58 + mixValue * 0.35; // R
      colors[i * 3 + 1] = 0.20 + mixValue * 0.40; // G
      colors[i * 3 + 2] = 0.92 - mixValue * 0.25; // B
    }

    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));

    const particlesMaterial = new THREE.PointsMaterial({
      size: 0.4,
      transparent: true,
      opacity: 0.7,
      vertexColors: true,
      blending: THREE.AdditiveBlending,
      depthWrite: false
    });
    const particles = new THREE.Points(particlesGeometry, particlesMaterial);
    scene.add(particles);

    // –ö–æ–Ω—Ç—Ä–æ–ª—ã –∫–∞–º–µ—Ä—ã
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.minDistance = 40;
    controls.maxDistance = 150;
    controls.maxPolarAngle = Math.PI / 1.5;
    controls.enablePan = false;
    controls.autoRotate = true; // –í–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    controls.autoRotateSpeed = 1.0;
    controls.target.set(0, 0, 0);
    controlsRef.current = controls;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleInteractionStart = () => {
      if (controls.autoRotate) {
        console.log('üëÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ - –≤—ã–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–≤—Ä–∞—â–µ–Ω–∏–µ');
        userInteractedRef.current = true;
        controls.autoRotate = false;
        if (onAutoRotateChange) {
          onAutoRotateChange(false);
        }
      }
    };

    renderer.domElement.addEventListener('mousedown', handleInteractionStart);
    renderer.domElement.addEventListener('touchstart', handleInteractionStart);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ë–ï–ó –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã
    loadTShirtModel(
      null, // –ü–µ—Ä–µ–¥–∞—ë–º null –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç—É—Ä—ã
      (progress) => console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: ${progress.toFixed(0)}%`),
      (model) => {
        model.position.y = -80;
        model.castShadow = true;
        model.receiveShadow = true;
        
        // –í–ê–ñ–ù–û: –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –º–æ–¥–µ–ª–∏
        model.traverse((child) => {
          if (child instanceof THREE.Mesh) {
            // –°–æ–∑–¥–∞—ë–º –±–µ–ª—ã–π –±–∞–∑–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—ã
            child.material = new THREE.MeshStandardMaterial({
              color: 0xffffff, // –ë–µ–ª—ã–π —Ü–≤–µ—Ç - –±–∞–∑–∞ –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä
              roughness: 0.85,
              metalness: 0.02,
              side: THREE.DoubleSide
            });
            child.castShadow = true;
            child.receiveShadow = true;
          }
        });
        
        scene.add(model);
        tshirtRef.current = model;
        setIsLoading(false);
        console.log('‚úÖ –ú–æ–¥–µ–ª—å —Ñ—É—Ç–±–æ–ª–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      },
      (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', error);
        setIsLoading(false);
      }
    );

    // –¶–∏–∫–ª –∞–Ω–∏–º–∞—Ü–∏–∏
    let time = 0;
    let animationFrameId;
    const animate = () => {
      animationFrameId = requestAnimationFrame(animate);
      time += 0.01;

      // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
      particles.rotation.y += 0.0003;
      particles.rotation.x = Math.sin(time * 0.1) * 0.05;
      
      // –ü—É–ª—å—Å–∞—Ü–∏—è –∫–æ–ª—å—Ü–∞
      ring.material.emissiveIntensity = 0.8 + Math.sin(time * 2) * 0.3;
      
      // –ü–ª–∞–≤–Ω–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ - –í–°–ï–ì–î–ê –≤–∫–ª—é—á–µ–Ω–æ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∞–≤—Ç–æ–≤—Ä–∞—â–µ–Ω–∏—è
      if (tshirtRef.current) {
        tshirtRef.current.position.y = -80 + Math.sin(time * 0.5) * 0.5;
      }

      if (controlsRef.current) {
        controls.update();
      }
      renderer.render(scene, camera);
    };
    animate();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    window.addEventListener('resize', handleResize);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      window.removeEventListener('resize', handleResize);
      renderer.domElement.removeEventListener('mousedown', handleInteractionStart);
      renderer.domElement.removeEventListener('touchstart', handleInteractionStart);
      
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
      }
      
      if (containerRef.current && renderer.domElement) {
        containerRef.current.removeChild(renderer.domElement);
      }
      renderer.dispose();
      controls.dispose();
      scene.traverse((object) => {
        if (object.geometry) object.geometry.dispose();
        if (object.material) {
          if (Array.isArray(object.material)) {
            object.material.forEach(m => m.dispose());
          } else {
            object.material.dispose();
          }
        }
      });
    };
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–≤—Ä–∞—â–µ–Ω–∏—è
  useEffect(() => {
    if (controlsRef.current) {
      controlsRef.current.autoRotate = autoRotate;
      console.log('üîÑ –ê–≤—Ç–æ–≤—Ä–∞—â–µ–Ω–∏–µ:', autoRotate ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ');
    }
  }, [autoRotate]);

  // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ autoRotate –Ω–∞ true
  useEffect(() => {
    if (autoRotate && controlsRef.current) {
      userInteractedRef.current = false;
      controlsRef.current.autoRotate = true;
      console.log('‚úÖ –ê–≤—Ç–æ–≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ');
    }
  }, [autoRotate]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∏–∑–∞–π–Ω–∞
  useEffect(() => {
    if (!design || !tshirtRef.current) {
      console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã:', { hasDesign: !!design, hasModel: !!tshirtRef.current });
      return;
    }

    console.log('üé® –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–∏–∑–∞–π–Ω–∞');
    console.log('   URL –¥–∏–∑–∞–π–Ω–∞:', design.url);
    
    const textureLoader = new THREE.TextureLoader();
    
    // –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    textureLoader.crossOrigin = 'anonymous';
    
    textureLoader.load(
      design.url,
      (texture) => {
        console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã
        if (currentTextureRef.current) {
          currentTextureRef.current.dispose();
          console.log('üóëÔ∏è –°—Ç–∞—Ä–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞');
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–±–µ—Å—à–æ–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω)
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        texture.encoding = THREE.sRGBEncoding;
        texture.minFilter = THREE.LinearMipmapLinearFilter;
        texture.magFilter = THREE.LinearFilter;
        texture.anisotropy = rendererRef.current?.capabilities.getMaxAnisotropy() || 16;
        
        console.log('‚öôÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∫ –º–æ–¥–µ–ª–∏...');
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∫–æ –≤—Å–µ–º mesh –æ–±—ä–µ–∫—Ç–∞–º –º–æ–¥–µ–ª–∏
        let meshCount = 0;
        tshirtRef.current.traverse((child) => {
          if (child instanceof THREE.Mesh) {
            // –í–ê–ñ–ù–û: –°–æ–∑–¥–∞—ë–º –ù–û–í–´–ô –º–∞—Ç–µ—Ä–∏–∞–ª —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π
            child.material = new THREE.MeshStandardMaterial({
              map: texture,
              roughness: 0.85,
              metalness: 0.02,
              side: THREE.DoubleSide
            });
            child.material.needsUpdate = true;
            meshCount++;
          }
        });

        currentTextureRef.current = texture;
        console.log(`‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ ${meshCount} mesh –æ–±—ä–µ–∫—Ç–∞–º`);
      },
      (progress) => {
        if (progress.lengthComputable) {
          const percent = (progress.loaded / progress.total) * 100;
          console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã: ${percent.toFixed(0)}%`);
        }
      },
      (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã:', error);
        console.error('   URL:', design.url);
        console.error('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: CORS, –Ω–µ–≤–µ—Ä–Ω—ã–π URL, –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ—Ä–≤–µ—Ä');
      }
    );
  }, [design]);

  return (
    <div 
      ref={containerRef} 
      className={`fixed inset-0 transition-opacity duration-500 ${isVisible ? 'opacity-100' : 'opacity-0'}`}
      style={{ zIndex: 0 }}
    >
      {isLoading && (
        <div className="absolute inset-0 flex items-center justify-center bg-black/80 backdrop-blur-sm z-10">
          <div className="text-center">
            <div className="w-16 h-16 border-4 border-purple-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-white font-bold text-lg">{t.viewer.loading}</p>
            <p className="text-purple-400 text-sm mt-2">{t.viewer.preparing}</p>
          </div>
        </div>
      )}
    </div>
  );
}