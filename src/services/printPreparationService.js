/**
 * –°–µ—Ä–≤–∏—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∏–∑–∞–π–Ω–æ–≤ –∫ –ø–µ—á–∞—Ç–∏
 * –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CMYK, —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –Ω–∞ –ª–µ–∫–∞–ª–∞
 */

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏
 */
export const PRINT_CONFIG = {
  dpi: 300,
  colorSpace: 'CMYK',
  fileFormat: 'PNG',
  sizesAvailable: ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL']
};

/**
 * –†–∞–∑–º–µ—Ä—ã –ª–µ–∫–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö –ø—Ä–∏ 300 DPI)
 */
export const PATTERN_SIZES = {
  XS: { front: { w: 1800, h: 2400 }, back: { w: 1800, h: 2400 }, sleeve: { w: 900, h: 1500 } },
  S: { front: { w: 1950, h: 2550 }, back: { w: 1950, h: 2550 }, sleeve: { w: 975, h: 1575 } },
  M: { front: { w: 2100, h: 2700 }, back: { w: 2100, h: 2700 }, sleeve: { w: 1050, h: 1650 } },
  L: { front: { w: 2250, h: 2850 }, back: { w: 2250, h: 2850 }, sleeve: { w: 1125, h: 1725 } },
  XL: { front: { w: 2400, h: 3000 }, back: { w: 2400, h: 3000 }, sleeve: { w: 1200, h: 1800 } },
  XXL: { front: { w: 2550, h: 3150 }, back: { w: 2550, h: 3150 }, sleeve: { w: 1275, h: 1875 } },
  XXXL: { front: { w: 2700, h: 3300 }, back: { w: 2700, h: 3300 }, sleeve: { w: 1350, h: 1950 } }
};

/**
 * –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –Ω—É–∂–Ω–æ–≥–æ DPI
 * –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Real-ESRGAN API
 */
export async function upscaleImage(imageUrl, targetWidth, targetHeight) {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      canvas.width = targetWidth;
      canvas.height = targetHeight;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
      ctx.imageSmoothingEnabled = true;
      ctx.imageSmoothingQuality = 'high';
      
      // –†–∏—Å—É–µ–º —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      ctx.drawImage(img, 0, 0, targetWidth, targetHeight);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ Real-ESRGAN API
      console.log(`üìê –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥: ${img.width}x${img.height} ‚Üí ${targetWidth}x${targetHeight}`);
      
      resolve(canvas.toDataURL('image/png'));
    };
    
    img.onerror = reject;
    img.src = imageUrl;
  });
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RGB –≤ CMYK (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è)
 * –î–ª—è —Ç–æ—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω —Ü–≤–µ—Ç–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å ICC
 */
export function rgbToCmyk(r, g, b) {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º RGB (0-255) –∫ (0-1)
  r = r / 255;
  g = g / 255;
  b = b / 255;
  
  // –í—ã—á–∏—Å–ª—è–µ–º K (black)
  const k = 1 - Math.max(r, g, b);
  
  // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —á—ë—Ä–Ω–æ–µ
  if (k === 1) {
    return { c: 0, m: 0, y: 0, k: 100 };
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º CMY
  const c = (1 - r - k) / (1 - k);
  const m = (1 - g - k) / (1 - k);
  const y = (1 - b - k) / (1 - k);
  
  return {
    c: Math.round(c * 100),
    m: Math.round(m * 100),
    y: Math.round(y * 100),
    k: Math.round(k * 100)
  };
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ CMYK
 */
export async function convertToCMYK(imageUrl) {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const data = imageData.data;
      
      // –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ CMYK –¥–∞–Ω–Ω—ã—Ö
      const cmykData = [];
      
      for (let i = 0; i < data.length; i += 4) {
        const r = data[i];
        const g = data[i + 1];
        const b = data[i + 2];
        const a = data[i + 3];
        
        const cmyk = rgbToCmyk(r, g, b);
        cmykData.push({ ...cmyk, a });
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        // (—Ä–µ–∞–ª—å–Ω—ã–π CMYK —Ñ–∞–π–ª –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
        const rgb = cmykToRgb(cmyk.c, cmyk.m, cmyk.y, cmyk.k);
        data[i] = rgb.r;
        data[i + 1] = rgb.g;
        data[i + 2] = rgb.b;
      }
      
      ctx.putImageData(imageData, 0, 0);
      
      console.log('üé® –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CMYK –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      console.log('‚ö†Ô∏è –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—á–∞—Ç–∏');
      
      resolve({
        previewUrl: canvas.toDataURL('image/png'),
        cmykData: cmykData,
        note: '–î–ª—è –ø–µ—á–∞—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å ICC –ø—Ä–æ—Ñ–∏–ª–µ–º'
      });
    };
    
    img.onerror = reject;
    img.src = imageUrl;
  });
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CMYK –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB (–¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
 */
function cmykToRgb(c, m, y, k) {
  c = c / 100;
  m = m / 100;
  y = y / 100;
  k = k / 100;
  
  const r = 255 * (1 - c) * (1 - k);
  const g = 255 * (1 - m) * (1 - k);
  const b = 255 * (1 - y) * (1 - k);
  
  return {
    r: Math.round(r),
    g: Math.round(g),
    b: Math.round(b)
  };
}

/**
 * –†–∞—Å–∫–ª–∞–¥–∫–∞ –¥–∏–∑–∞–π–Ω–∞ –Ω–∞ —á–∞—Å—Ç–∏ (–ø–µ—Ä–µ–¥, —Å–ø–∏–Ω–∫–∞, —Ä—É–∫–∞–≤–∞)
 */
export async function layoutPattern(patternUrl, size = 'M') {
  const sizes = PATTERN_SIZES[size];
  
  if (!sizes) {
    throw new Error(`–†–∞–∑–º–µ—Ä ${size} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
  
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = 'anonymous';
    
    img.onload = async () => {
      const parts = {};
      
      // –ü–µ—Ä–µ–¥
      const frontCanvas = document.createElement('canvas');
      const frontCtx = frontCanvas.getContext('2d');
      frontCanvas.width = sizes.front.w;
      frontCanvas.height = sizes.front.h;
      
      // –°–æ–∑–¥–∞—ë–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω
      const pattern = frontCtx.createPattern(img, 'repeat');
      frontCtx.fillStyle = pattern;
      frontCtx.fillRect(0, 0, frontCanvas.width, frontCanvas.height);
      parts.front = frontCanvas.toDataURL('image/png');
      
      // –°–ø–∏–Ω–∫–∞
      const backCanvas = document.createElement('canvas');
      const backCtx = backCanvas.getContext('2d');
      backCanvas.width = sizes.back.w;
      backCanvas.height = sizes.back.h;
      
      const patternBack = backCtx.createPattern(img, 'repeat');
      backCtx.fillStyle = patternBack;
      backCtx.fillRect(0, 0, backCanvas.width, backCanvas.height);
      parts.back = backCanvas.toDataURL('image/png');
      
      // –†—É–∫–∞–≤–∞ (2 —à—Ç—É–∫–∏)
      const sleeveCanvas = document.createElement('canvas');
      const sleeveCtx = sleeveCanvas.getContext('2d');
      sleeveCanvas.width = sizes.sleeve.w;
      sleeveCanvas.height = sizes.sleeve.h;
      
      const patternSleeve = sleeveCtx.createPattern(img, 'repeat');
      sleeveCtx.fillStyle = patternSleeve;
      sleeveCtx.fillRect(0, 0, sleeveCanvas.width, sleeveCanvas.height);
      parts.sleeveLeft = sleeveCanvas.toDataURL('image/png');
      parts.sleeveRight = sleeveCanvas.toDataURL('image/png');
      
      console.log(`‚úÇÔ∏è –†–∞—Å–∫–ª–∞–¥–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${size} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
      
      resolve({
        size: size,
        parts: parts,
        dimensions: sizes
      });
    };
    
    img.onerror = reject;
    img.src = patternUrl;
  });
}

/**
 * –ü–æ–ª–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—á–∞—Ç–∏
 */
export async function prepareToPrint(designUrl, size = 'M', options = {}) {
  try {
    console.log('üñ®Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—á–∞—Ç–∏...');
    
    const sizes = PATTERN_SIZES[size];
    if (!sizes) {
      throw new Error(`–†–∞–∑–º–µ—Ä ${size} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
    }
    
    // –®–∞–≥ 1: –†–∞—Å–∫–ª–∞–¥–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏
    console.log('   –®–∞–≥ 1: –†–∞—Å–∫–ª–∞–¥–∫–∞ –Ω–∞ –ª–µ–∫–∞–ª–∞...');
    const layout = await layoutPattern(designUrl, size);
    
    // –®–∞–≥ 2: –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    console.log('   –®–∞–≥ 2: –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥ –¥–æ –ø–µ—á–∞—Ç–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞...');
    const upscaled = {};
    
    for (const [part, url] of Object.entries(layout.parts)) {
      const dimension = part === 'front' ? sizes.front :
                       part === 'back' ? sizes.back :
                       sizes.sleeve;
      
      upscaled[part] = await upscaleImage(url, dimension.w, dimension.h);
    }
    
    // –®–∞–≥ 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CMYK
    if (options.convertToCMYK) {
      console.log('   –®–∞–≥ 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CMYK...');
      const cmykParts = {};
      
      for (const [part, url] of Object.entries(upscaled)) {
        const cmyk = await convertToCMYK(url);
        cmykParts[part] = cmyk.previewUrl;
      }
      
      return {
        size: size,
        parts: cmykParts,
        colorSpace: 'CMYK',
        dpi: PRINT_CONFIG.dpi,
        dimensions: sizes,
        note: '–§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–µ—á–∞—Ç–∏. –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —ç–∫—Ä–∞–Ω–∞.'
      };
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º RGB –≤–µ—Ä—Å–∏—é
    return {
      size: size,
      parts: upscaled,
      colorSpace: 'RGB',
      dpi: PRINT_CONFIG.dpi,
      dimensions: sizes
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ø–µ—á–∞—Ç–∏:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏
 */
export async function createPrintPackage(printData) {
  // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ZIP –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ JSZip
  // –ó–¥–µ—Å—å —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
  
  const files = [];
  
  for (const [part, dataUrl] of Object.entries(printData.parts)) {
    files.push({
      name: `${printData.size}_${part}.png`,
      data: dataUrl,
      size: printData.dimensions[part === 'sleeveLeft' || part === 'sleeveRight' ? 'sleeve' : part]
    });
  }
  
  // –°–æ–∑–¥–∞—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
  const info = {
    size: printData.size,
    colorSpace: printData.colorSpace,
    dpi: printData.dpi,
    files: files.map(f => ({
      name: f.name,
      width: f.size.w,
      height: f.size.h
    })),
    instructions: [
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å—É–±–ª–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–µ—á–∞—Ç–∏',
      'DPI: 300',
      '–¶–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: ' + printData.colorSpace,
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –ø–µ—Ä–µ–¥ –ø–µ—á–∞—Ç—å—é',
      '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è –ø–µ—á–∞—Ç—å'
    ]
  };
  
  files.push({
    name: 'README.json',
    data: JSON.stringify(info, null, 2)
  });
  
  console.log('üì¶ –ü–∞–∫–µ—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å–æ–∑–¥–∞–Ω:', files.length, '—Ñ–∞–π–ª–æ–≤');
  
  return {
    files: files,
    info: info
  };
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 */
export function downloadFile(dataUrl, filename) {
  const link = document.createElement('a');
  link.href = dataUrl;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–∞–∫–µ—Ç–∞
 */
export function downloadPrintPackage(printPackage) {
  printPackage.files.forEach((file, index) => {
    setTimeout(() => {
      if (file.name.endsWith('.json')) {
        const blob = new Blob([file.data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        downloadFile(url, file.name);
        URL.revokeObjectURL(url);
      } else {
        downloadFile(file.data, file.name);
      }
    }, index * 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
  });
  
  console.log('‚¨áÔ∏è –ù–∞—á–∞—Ç–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ', printPackage.files.length, '—Ñ–∞–π–ª–æ–≤');
}