/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Custom OpenAI-compatible API (aiguoguo199.com)
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DALL-E 3
 */
import config from '../config';
import {
  API_CONFIG,
  STYLE_MODIFIERS,
  PATTERN_TYPES,
  GENERATION_STAGES
} from '../constants';

const { PROXY_API_URL, OPENAI_BASE_URL } = config;
const { MAX_VARIANTS } = API_CONFIG;

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ DALL-E 3
 */
async function generateSingleImage(prompt, settings = {}) {
  const apiKey = config.OPENAI_API_KEY;
  
  if (!apiKey) {
    throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }

  const enhancedPrompt = enhancePrompt(prompt, settings);
  
  // DALL-E 3 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã: 1024x1024, 1024x1792, 1792x1024
  const size = '1024x1024';
  const quality = settings.detailLevel === 'high' ? 'hd' : 'standard';
  const style = settings.style === 'realistic' ? 'natural' : 'vivid';

  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Custom OpenAI API...');
    console.log(`   Base URL: ${OPENAI_BASE_URL}`);
    console.log(`   –ü—Ä–æ–º–ø—Ç: ${enhancedPrompt.substring(0, 100)}...`);
    
    const response = await fetch(`${PROXY_API_URL}/generate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        apiKey: apiKey,
        baseUrl: OPENAI_BASE_URL,
        prompt: enhancedPrompt,
        size: size,
        quality: quality,
        style: style
      })
    });

    if (!response.ok) {
      const error = await response.json();
      console.error('‚ùå –û—à–∏–±–∫–∞ API:', error);
      throw new Error(error.error?.message || error.message || `HTTP ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.data || !data.data[0] || !data.data[0].url) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
    }

    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ');
    return {
      url: data.data[0].url,
      revised_prompt: data.data[0].revised_prompt
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${error.message}`);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
 * DALL-E 3 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∑–∞ —Ä–∞–∑
 */
export async function generateDesigns(prompt, settings = {}, onProgressUpdate = null) {
  const numberOfVariants = Math.min(settings.numberOfVariants || 4, MAX_VARIANTS);
  console.log(`üé® –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${numberOfVariants} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...`);
  console.log(`üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API: ${OPENAI_BASE_URL}`);
  
  const imageStatuses = Array.from({ length: numberOfVariants }, (_, i) => ({
    index: i,
    stage: GENERATION_STAGES.CREATING,
    progress: 0
  }));
  
  const updateProgress = () => {
    if (onProgressUpdate) onProgressUpdate([...imageStatuses]);
  };
  
  const results = [];
  
  try {
    updateProgress();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (let i = 0; i < numberOfVariants; i++) {
      try {
        console.log(`\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${i + 1}/${numberOfVariants}...`);
        
        imageStatuses[i] = { 
          index: i, 
          stage: GENERATION_STAGES.GENERATING, 
          progress: 30 
        };
        updateProgress();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        const variantPrompt = addVariationToPrompt(prompt, i, numberOfVariants);
        const result = await generateSingleImage(variantPrompt, settings);
        
        imageStatuses[i] = { 
          index: i, 
          stage: GENERATION_STAGES.COMPLETED, 
          progress: 100 
        };
        updateProgress();
        
        results.push({
          id: `dalle_${Date.now()}_${i}`,
          url: result.url,
          prompt: prompt,
          revised_prompt: result.revised_prompt,
          index: i
        });
        
        console.log(`‚úÖ –í–∞—Ä–∏–∞–Ω—Ç ${i + 1}/${numberOfVariants} –≥–æ—Ç–æ–≤`);
        console.log(`   URL: ${result.url.substring(0, 60)}...`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if (i < numberOfVariants - 1) {
          console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...');
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${i + 1}:`, error.message);
        imageStatuses[i] = { 
          index: i, 
          stage: GENERATION_STAGES.ERROR, 
          progress: 0,
          error: error.message
        };
        updateProgress();
        
        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —É–¥–∞–ª—Å—è - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—ã—Ç–∞—Ç—å—Å—è
        // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏
        if (results.length === 0 && i === numberOfVariants - 1) {
          throw error; // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        if (i < numberOfVariants - 1) {
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
      }
    }
    
    if (results.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –±–∞–ª–∞–Ω—Å.');
    }
    
    console.log(`\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${results.length}/${numberOfVariants} —É—Å–ø–µ—à–Ω–æ`);
    return results;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∑–∞–π–Ω—ã: ${error.message}`);
  }
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
 */
function addVariationToPrompt(prompt, index, total) {
  const variations = [
    '',
    ', with alternative color palette',
    ', different artistic composition',
    ', unique perspective and layout',
    ', creative interpretation with variation',
    ', artistic variation with different style emphasis'
  ];
  
  if (index === 0) {
    return prompt; // –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  }
  
  const variation = variations[index % variations.length];
  return prompt + variation;
}

/**
 * –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
function enhancePrompt(prompt, settings = {}) {
  let enhanced = prompt;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
  if (settings.patternType === PATTERN_TYPES.SEAMLESS) {
    enhanced += ', SEAMLESS REPEATING PATTERN, tileable texture, infinite pattern, edges match perfectly, wrap-around design, textile design for clothing';
  } else if (settings.patternType === PATTERN_TYPES.GEOMETRIC) {
    enhanced += ', SEAMLESS GEOMETRIC PATTERN, tileable shapes, perfect symmetry, repeating angular design, geometric tessellation for apparel';
  } else if (settings.patternType === PATTERN_TYPES.COMPOSITION) {
    enhanced += ', artistic composition for t-shirt print, centered design, full print artwork, complete illustration';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–ª—è
  if (settings.style && STYLE_MODIFIERS[settings.style]) {
    enhanced += STYLE_MODIFIERS[settings.style];
  }
  
  // –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ —É—Ä–æ–≤–Ω—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
  if (settings.detailLevel === 'high') {
    enhanced += ', ultra detailed, masterpiece quality, professional artwork, intricate details, 4K quality';
  } else if (settings.detailLevel === 'medium') {
    enhanced += ', detailed artwork, high quality design, professional finish';
  } else {
    enhanced += ', clean design, good quality';
  }
  
  // –¢–µ–∫—Å—Ç–∏–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  enhanced += ', optimized for textile printing, fashion design, apparel artwork, print-ready, vibrant colors';
  
  // DALL-E 3 –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
  enhanced = enhanced.replace(/,\s+/g, ', ').trim();
  
  return enhanced;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞
 */
export function isApiKeyConfigured() {
  const apiKey = config.OPENAI_API_KEY;
  return apiKey && apiKey.length > 0 && apiKey.startsWith('sk-');
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö API
 */
export function getApiInfo() {
  return {
    provider: 'Custom OpenAI (aiguoguo199.com)',
    model: 'DALL-E 3',
    baseUrl: OPENAI_BASE_URL,
    maxSize: '1024x1024',
    supportedSizes: ['1024x1024', '1024x1792', '1792x1024'],
    imagesPerRequest: 1,
    note: 'DALL-E 3 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∑–∞ —Ä–∞–∑',
    balanceCheck: 'https://usage.aiguoguo199.com/',
    testChat: 'https://chat.aiguoguo199.com/'
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
 */
export async function checkBalance() {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º
  // –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ API
  console.log('üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –Ω–∞: https://usage.aiguoguo199.com/');
  return {
    message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://usage.aiguoguo199.com/'
  };
}