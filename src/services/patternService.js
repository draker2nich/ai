/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–µ–∫–∞–ª–∞–º–∏ –æ–¥–µ–∂–¥—ã
 * UV-–º–∞–ø–ø–∏–Ω–≥ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—á–∞—Ç–∏
 */

import { API_CONFIG } from '../constants';

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–µ–∫–∞–ª –∫–æ—Ñ—Ç—ã
 */
const PATTERN_STRUCTURE = {
  // –ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å
  front: {
    name: '–ü–µ—Ä—ë–¥',
    uvBounds: { x: 0, y: 0, width: 0.25, height: 0.5 }
  },
  // –ó–∞–¥–Ω—è—è —á–∞—Å—Ç—å
  back: {
    name: '–°–ø–∏–Ω–∞',
    uvBounds: { x: 0.25, y: 0, width: 0.25, height: 0.5 }
  },
  // –õ–µ–≤—ã–π —Ä—É–∫–∞–≤
  sleeveLeft: {
    name: '–õ–µ–≤—ã–π —Ä—É–∫–∞–≤',
    uvBounds: { x: 0, y: 0.5, width: 0.5, height: 0.5 }
  },
  // –ü—Ä–∞–≤—ã–π —Ä—É–∫–∞–≤
  sleeveRight: {
    name: '–ü—Ä–∞–≤—ã–π —Ä—É–∫–∞–≤',
    uvBounds: { x: 0.5, y: 0.5, width: 0.5, height: 0.5 }
  }
};

/**
 * –†–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã (–≤ —Å–º)
 */
export const SIZES = {
  XS: { chest: 84, length: 62, sleeve: 58 },
  S: { chest: 88, length: 64, sleeve: 60 },
  M: { chest: 92, length: 66, sleeve: 62 },
  L: { chest: 96, length: 68, sleeve: 64 },
  XL: { chest: 100, length: 70, sleeve: 66 },
  XXL: { chest: 104, length: 72, sleeve: 68 },
  XXXL: { chest: 108, length: 74, sleeve: 70 }
};

/**
 * DPI –¥–ª—è –ø–µ—á–∞—Ç–∏
 */
const PRINT_DPI = {
  draft: 150,      // –ß–µ—Ä–Ω–æ–≤–∏–∫
  standard: 300,   // –°—Ç–∞–Ω–¥–∞—Ä—Ç
  high: 600        // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
};

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –Ω–∞ –≤—Å–µ –ª–µ–∫–∞–ª–∞
 */
export async function applyDesignToPatterns(designUrl, size = 'M', options = {}) {
  const {
    seamless = true,
    quality = 'standard'
  } = options;

  try {
    console.log('üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –Ω–∞ –ª–µ–∫–∞–ª–∞...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∑–∞–π–Ω
    const designImage = await loadImage(designUrl);
    
    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏
    const patterns = {};
    
    for (const [key, pattern] of Object.entries(PATTERN_STRUCTURE)) {
      console.log(`üìê –û–±—Ä–∞–±–æ—Ç–∫–∞: ${pattern.name}`);
      
      const patternCanvas = await createPatternPiece(
        designImage,
        pattern,
        SIZES[size],
        { seamless, quality }
      );
      
      patterns[key] = {
        name: pattern.name,
        canvas: patternCanvas,
        dataUrl: patternCanvas.toDataURL('image/png', 1.0)
      };
    }
    
    console.log('‚úÖ –í—Å–µ –ª–µ–∫–∞–ª–∞ –≥–æ—Ç–æ–≤—ã!');
    return patterns;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª–∏ –ª–µ–∫–∞–ª–∞
 */
async function createPatternPiece(designImage, pattern, sizeData, options) {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ –ø–∏–∫—Å–µ–ª—è—Ö
  const dpi = PRINT_DPI[options.quality] || PRINT_DPI.standard;
  const cmToPx = dpi / 2.54; // 1—Å–º = dpi/2.54 –ø–∏–∫—Å–µ–ª–µ–π
  
  // –†–∞–∑–º–µ—Ä –¥–µ—Ç–∞–ª–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
  const width = Math.round(sizeData.chest * cmToPx);
  const height = Math.round(sizeData.length * cmToPx);
  
  canvas.width = width;
  canvas.height = height;
  
  // –ï—Å–ª–∏ seamless - —Å–æ–∑–¥–∞—ë–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω
  if (options.seamless) {
    const pattern = ctx.createPattern(designImage, 'repeat');
    ctx.fillStyle = pattern;
    ctx.fillRect(0, 0, width, height);
  } else {
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–∏–∑–∞–π–Ω –Ω–∞ –≤—Å—é –¥–µ—Ç–∞–ª—å
    ctx.drawImage(designImage, 0, 0, width, height);
  }
  
  return canvas;
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ª–µ–∫–∞–ª –¥–ª—è –ø–µ—á–∞—Ç–∏
 */
export async function exportForPrinting(patterns, size, options = {}) {
  const {
    format = 'separate', // 'separate' –∏–ª–∏ 'combined'
    includeMarkers = true,
    quality = 'standard'
  } = options;
  
  if (format === 'separate') {
    // –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏
    return exportSeparatePatterns(patterns, size, { includeMarkers, quality });
  } else {
    // –í—Å–µ –¥–µ—Ç–∞–ª–∏ –Ω–∞ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ
    return exportCombinedPattern(patterns, size, { includeMarkers, quality });
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
async function exportSeparatePatterns(patterns, size, options) {
  const files = [];
  
  for (const [key, pattern] of Object.entries(patterns)) {
    const canvas = pattern.canvas;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (options.includeMarkers) {
      addPrintMarkers(canvas, pattern.name, size);
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
    const blob = await canvasToBlob(canvas);
    
    files.push({
      name: `${pattern.name}_${size}.png`,
      blob: blob,
      url: URL.createObjectURL(blob)
    });
  }
  
  return files;
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –º–∞–∫–µ—Ç–∞
 */
async function exportCombinedPattern(patterns, size, options) {
  // –°–æ–∑–¥–∞—ë–º –±–æ–ª—å—à–æ–π canvas –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  
  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
  const margin = 50; // –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –¥–µ—Ç–∞–ª—è–º–∏
  let totalWidth = margin;
  let totalHeight = margin;
  let maxRowHeight = 0;
  let currentX = margin;
  let currentY = margin;
  
  // –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
  const layout = [];
  
  for (const [key, pattern] of Object.entries(patterns)) {
    const patternCanvas = pattern.canvas;
    
    // –ï—Å–ª–∏ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç –ø–æ —à–∏—Ä–∏–Ω–µ - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    if (currentX + patternCanvas.width > 5000) { // –º–∞–∫—Å —à–∏—Ä–∏–Ω–∞
      currentX = margin;
      currentY += maxRowHeight + margin;
      maxRowHeight = 0;
    }
    
    layout.push({
      canvas: patternCanvas,
      x: currentX,
      y: currentY,
      name: pattern.name
    });
    
    currentX += patternCanvas.width + margin;
    maxRowHeight = Math.max(maxRowHeight, patternCanvas.height);
    totalWidth = Math.max(totalWidth, currentX);
    totalHeight = Math.max(totalHeight, currentY + patternCanvas.height + margin);
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
  canvas.width = totalWidth;
  canvas.height = totalHeight;
  
  // –ë–µ–ª—ã–π —Ñ–æ–Ω
  ctx.fillStyle = '#ffffff';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  
  // –†–∏—Å—É–µ–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏
  for (const item of layout) {
    ctx.drawImage(item.canvas, item.x, item.y);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏
    if (options.includeMarkers) {
      ctx.font = '24px Arial';
      ctx.fillStyle = '#000000';
      ctx.fillText(
        `${item.name} (${size})`,
        item.x,
        item.y - 10
      );
      
      // –†–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ –¥–µ—Ç–∞–ª–∏
      ctx.strokeStyle = '#000000';
      ctx.lineWidth = 2;
      ctx.strokeRect(item.x, item.y, item.canvas.width, item.canvas.height);
    }
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
  const blob = await canvasToBlob(canvas);
  
  return [{
    name: `–í—Å–µ_–¥–µ—Ç–∞–ª–∏_${size}.png`,
    blob: blob,
    url: URL.createObjectURL(blob)
  }];
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –¥–ª—è –ø–µ—á–∞—Ç–∏
 */
function addPrintMarkers(canvas, patternName, size) {
  const ctx = canvas.getContext('2d');
  
  // –ú–µ—Ç–∫–∏ –ø–æ —É–≥–ª–∞–º (–¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—á–∞—Ç–∏)
  const markerSize = 20;
  ctx.fillStyle = '#000000';
  
  // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
  ctx.fillRect(0, 0, markerSize, 2);
  ctx.fillRect(0, 0, 2, markerSize);
  
  // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
  ctx.fillRect(canvas.width - markerSize, 0, markerSize, 2);
  ctx.fillRect(canvas.width - 2, 0, 2, markerSize);
  
  // –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
  ctx.fillRect(0, canvas.height - 2, markerSize, 2);
  ctx.fillRect(0, canvas.height - markerSize, 2, markerSize);
  
  // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
  ctx.fillRect(canvas.width - markerSize, canvas.height - 2, markerSize, 2);
  ctx.fillRect(canvas.width - 2, canvas.height - markerSize, 2, markerSize);
  
  // –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞
  ctx.font = 'bold 16px Arial';
  ctx.fillStyle = '#000000';
  ctx.fillText(
    `${patternName} | –†–∞–∑–º–µ—Ä: ${size}`,
    10,
    canvas.height - 10
  );
  
  // –õ–∏–Ω–µ–π–∫–∞ (–∫–∞–∂–¥—ã–µ 10—Å–º)
  ctx.strokeStyle = '#000000';
  ctx.lineWidth = 1;
  const dpi = PRINT_DPI.standard;
  const cmToPx = dpi / 2.54;
  
  for (let cm = 10; cm * cmToPx < canvas.width; cm += 10) {
    const x = cm * cmToPx;
    ctx.beginPath();
    ctx.moveTo(x, canvas.height - 30);
    ctx.lineTo(x, canvas.height - 20);
    ctx.stroke();
    ctx.fillText(`${cm}—Å–º`, x - 15, canvas.height - 35);
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function loadImage(url) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => resolve(img);
    img.onerror = reject;
    img.src = url;
  });
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è canvas –≤ blob
 */
function canvasToBlob(canvas) {
  return new Promise((resolve) => {
    canvas.toBlob((blob) => {
      resolve(blob);
    }, 'image/png', 1.0);
  });
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
 */
export async function downloadPatterns(files) {
  for (const file of files) {
    const link = document.createElement('a');
    link.href = file.url;
    link.download = file.name;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ (—Ç—Ä–µ–±—É–µ—Ç JSZip)
 */
export async function createPrintPackage(patterns, size, designUrl) {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞
  // –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ jszip
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏...');
  
  return {
    patterns,
    size,
    designUrl,
    timestamp: Date.now()
  };
}
