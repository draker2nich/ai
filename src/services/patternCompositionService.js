/**
 * –°–µ—Ä–≤–∏—Å –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–ú–µ—Ç–æ–¥ –ê)
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å—Ç–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ + –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ UV-—Ä–∞–∑–≤—ë—Ä—Ç–∫—É
 */

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å—Ç–æ–≥–æ –±–µ—Å—à–æ–≤–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —á–µ—Ä–µ–∑ DALL-E
 */
export async function generateSeamlessPattern(basePrompt, style = 'vivid') {
  // –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –±–µ—Å—à–æ–≤–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
  const seamlessPrompt = `${basePrompt}, SEAMLESS TILEABLE PATTERN, perfect edges that connect seamlessly, repeating textile design, infinite wrap-around pattern, edges match exactly on all sides, professional fabric print design, high quality seamless texture`;
  
  return {
    prompt: seamlessPrompt,
    style: style,
    size: '1024x1024'
  };
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Å–∫–∏ –∏–∑ UV-—Ä–∞–∑–≤—ë—Ä—Ç–∫–∏
 * –ë–µ—Ä—ë–º UV-–∫–∞—Ä—Ç—É –∏ —Å–æ–∑–¥–∞—ë–º –º–∞—Å–∫—É –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
 */
export async function createUVMask(uvMapPath) {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      canvas.width = img.width;
      canvas.height = img.height;
      
      // –†–∏—Å—É–µ–º UV-–∫–∞—Ä—Ç—É
      ctx.drawImage(img, 0, 0);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const data = imageData.data;
      
      // –°–æ–∑–¥–∞—ë–º –º–∞—Å–∫—É: –¥–µ–ª–∞–µ–º –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∫—Ä–∞—Å–Ω—ã–º–∏, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —á—ë—Ä–Ω—ã–º
      for (let i = 0; i < data.length; i += 4) {
        const alpha = data[i + 3];
        
        if (alpha > 128) {
          // –û–±–ª–∞—Å—Ç—å –¥–µ—Ç–∞–ª–∏ - –¥–µ–ª–∞–µ–º –∫—Ä–∞—Å–Ω–æ–π
          data[i] = 255;     // R
          data[i + 1] = 0;   // G
          data[i + 2] = 0;   // B
          data[i + 3] = 255; // A
        } else {
          // –ü—É—Å—Ç–∞—è –æ–±–ª–∞—Å—Ç—å - –¥–µ–ª–∞–µ–º —á—ë—Ä–Ω–æ–π
          data[i] = 0;
          data[i + 1] = 0;
          data[i + 2] = 0;
          data[i + 3] = 255;
        }
      }
      
      ctx.putImageData(imageData, 0, 0);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å–∫—É –∫–∞–∫ data URL
      resolve(canvas.toDataURL('image/png'));
    };
    
    img.onerror = reject;
    img.src = uvMapPath;
  });
}

/**
 * –ù–∞–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –Ω–∞ –º–∞—Å–∫—É
 * –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: –ø–∞—Ç—Ç–µ—Ä–Ω –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º–µ –º–∞—Å–∫–∏
 */
export async function applyPatternToMask(patternUrl, maskDataUrl, options = {}) {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    const patternImg = new Image();
    const maskImg = new Image();
    
    let loadedCount = 0;
    
    const checkBothLoaded = () => {
      loadedCount++;
      if (loadedCount === 2) {
        compose();
      }
    };
    
    const compose = () => {
      // –†–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞ = —Ä–∞–∑–º–µ—Ä –º–∞—Å–∫–∏
      canvas.width = maskImg.width;
      canvas.height = maskImg.height;
      
      // –†–∏—Å—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω, –ø–æ–≤—Ç–æ—Ä—è—è –µ–≥–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
      const patternCanvas = document.createElement('canvas');
      patternCanvas.width = canvas.width;
      patternCanvas.height = canvas.height;
      const patternCtx = patternCanvas.getContext('2d');
      
      // –°–æ–∑–¥–∞—ë–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω
      const pattern = patternCtx.createPattern(patternImg, 'repeat');
      patternCtx.fillStyle = pattern;
      patternCtx.fillRect(0, 0, canvas.width, canvas.height);
      
      // –†–∏—Å—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–Ω–≤–∞—Å–µ
      ctx.drawImage(patternCanvas, 0, 0);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å–∫—É –∫–∞–∫ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
      ctx.globalCompositeOperation = 'destination-in';
      ctx.drawImage(maskImg, 0, 0);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å (–ª–æ–≥–æ—Ç–∏–ø—ã, –ø–æ–ª–æ—Å—ã)
      if (options.overlays) {
        ctx.globalCompositeOperation = 'source-over';
        options.overlays.forEach(overlay => {
          const overlayImg = new Image();
          overlayImg.src = overlay.url;
          overlayImg.onload = () => {
            ctx.drawImage(overlayImg, overlay.x, overlay.y, overlay.width, overlay.height);
          };
        });
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      setTimeout(() => {
        resolve(canvas.toDataURL('image/png'));
      }, 100);
    };
    
    patternImg.crossOrigin = 'anonymous';
    maskImg.crossOrigin = 'anonymous';
    
    patternImg.onload = checkBothLoaded;
    maskImg.onload = checkBothLoaded;
    
    patternImg.onerror = reject;
    maskImg.onerror = reject;
    
    patternImg.src = patternUrl;
    maskImg.src = maskDataUrl;
  });
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ª–æ–≥–æ—Ç–∏–ø—ã, –ø–æ–ª–æ—Å—ã, –Ω–æ–º–µ—Ä–∞)
 */
export function addMandatoryElements(baseImageUrl, elements) {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const baseImg = new Image();
    
    baseImg.crossOrigin = 'anonymous';
    baseImg.onload = () => {
      canvas.width = baseImg.width;
      canvas.height = baseImg.height;
      
      // –†–∏—Å—É–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      ctx.drawImage(baseImg, 0, 0);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
      let loadedElements = 0;
      const totalElements = elements.length;
      
      if (totalElements === 0) {
        resolve(canvas.toDataURL('image/png'));
        return;
      }
      
      elements.forEach(element => {
        if (element.type === 'text') {
          // –¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
          ctx.font = element.font || '48px Arial';
          ctx.fillStyle = element.color || '#FFFFFF';
          ctx.textAlign = element.align || 'center';
          ctx.fillText(element.text, element.x, element.y);
          
          loadedElements++;
          if (loadedElements === totalElements) {
            resolve(canvas.toDataURL('image/png'));
          }
        } else if (element.type === 'image') {
          // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ª–æ–≥–æ—Ç–∏–ø –∏ —Ç.–¥.)
          const img = new Image();
          img.crossOrigin = 'anonymous';
          img.onload = () => {
            ctx.drawImage(img, element.x, element.y, element.width, element.height);
            loadedElements++;
            if (loadedElements === totalElements) {
              resolve(canvas.toDataURL('image/png'));
            }
          };
          img.onerror = () => {
            loadedElements++;
            if (loadedElements === totalElements) {
              resolve(canvas.toDataURL('image/png'));
            }
          };
          img.src = element.url;
        }
      });
    };
    
    baseImg.onerror = reject;
    baseImg.src = baseImageUrl;
  });
}

/**
 * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å Method A
 */
export async function processMethodA(prompt, settings, uvMapPath, overlayElements = []) {
  try {
    console.log('üé® –ú–µ—Ç–æ–¥ –ê: –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏');
    
    // –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å—Ç–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    console.log('üìù –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞...');
    const patternConfig = await generateSeamlessPattern(prompt, settings.style);
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ DALL-E –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
    return {
      patternConfig,
      uvMapPath,
      overlayElements,
      processSteps: {
        step1: 'Generate seamless pattern with DALL-E',
        step2: 'Create UV mask from mapping',
        step3: 'Apply pattern to mask',
        step4: 'Add overlays (logos, stripes, etc.)'
      }
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ú–µ—Ç–æ–¥–µ –ê:', error);
    throw error;
  }
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∫ 3D –º–æ–¥–µ–ª–∏
 */
export async function applyCompositionToModel(patternUrl, uvMapPath, overlayElements = []) {
  try {
    console.log('üé≠ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∫ –º–æ–¥–µ–ª–∏...');
    
    // –®–∞–≥ 1: –°–æ–∑–¥–∞—ë–º –º–∞—Å–∫—É –∏–∑ UV-–∫–∞—Ä—Ç—ã
    console.log('   –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏...');
    const mask = await createUVMask(uvMapPath);
    
    // –®–∞–≥ 2: –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ –º–∞—Å–∫—É
    console.log('   –ù–∞–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞...');
    const composed = await applyPatternToMask(patternUrl, mask);
    
    // –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (overlayElements.length > 0) {
      console.log('   –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
      const final = await addMandatoryElements(composed, overlayElements);
      return final;
    }
    
    return composed;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ—Å—à–æ–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
 */
export function validateSeamlessPattern(imageUrl) {
  return new Promise((resolve) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const data = imageData.data;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫—Ä–∞—ë–≤
      const edgeThreshold = 30; // –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
      let edgeMatches = 0;
      let edgeChecks = 0;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏ –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è
      for (let x = 0; x < canvas.width; x++) {
        const topIdx = (0 * canvas.width + x) * 4;
        const bottomIdx = ((canvas.height - 1) * canvas.width + x) * 4;
        
        const rDiff = Math.abs(data[topIdx] - data[bottomIdx]);
        const gDiff = Math.abs(data[topIdx + 1] - data[bottomIdx + 1]);
        const bDiff = Math.abs(data[topIdx + 2] - data[bottomIdx + 2]);
        
        if (rDiff < edgeThreshold && gDiff < edgeThreshold && bDiff < edgeThreshold) {
          edgeMatches++;
        }
        edgeChecks++;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
      for (let y = 0; y < canvas.height; y++) {
        const leftIdx = (y * canvas.width + 0) * 4;
        const rightIdx = (y * canvas.width + (canvas.width - 1)) * 4;
        
        const rDiff = Math.abs(data[leftIdx] - data[rightIdx]);
        const gDiff = Math.abs(data[leftIdx + 1] - data[rightIdx + 1]);
        const bDiff = Math.abs(data[leftIdx + 2] - data[rightIdx + 2]);
        
        if (rDiff < edgeThreshold && gDiff < edgeThreshold && bDiff < edgeThreshold) {
          edgeMatches++;
        }
        edgeChecks++;
      }
      
      const seamlessScore = (edgeMatches / edgeChecks) * 100;
      
      resolve({
        isSeamless: seamlessScore > 70,
        score: seamlessScore.toFixed(1),
        recommendation: seamlessScore > 70 
          ? '–ü–∞—Ç—Ç–µ—Ä–Ω —Ö–æ—Ä–æ—à–æ –±–µ—Å—à–æ–≤–Ω—ã–π' 
          : '–ü–∞—Ç—Ç–µ—Ä–Ω –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –≤–∏–¥–∏–º—ã–µ —à–≤—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è'
      });
    };
    
    img.onerror = () => resolve({ isSeamless: false, score: 0, recommendation: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏' });
    img.src = imageUrl;
  });
}